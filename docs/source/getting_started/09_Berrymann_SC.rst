
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting_started\09_Berrymann_SC.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting_started_09_Berrymann_SC.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting_started_09_Berrymann_SC.py:


Berryman Self consistent approach
=================================
Berryman Self consistent approach for calculating the elastic moduli of N phase composite

.. GENERATED FROM PYTHON SOURCE LINES 8-15

.. code-block:: python3


    import numpy as np 
    import matplotlib.pyplot as plt
    plt.rcParams['font.size']=14
    plt.rcParams['font.family']='arial'









.. GENERATED FROM PYTHON SOURCE LINES 16-21

.. code-block:: python3


    import rockphypy # import the module 
    from rockphypy import EM 
    from rockphypy import Fluid








.. GENERATED FROM PYTHON SOURCE LINES 22-31

Berryman's self-consistent approximations for N-phase composites are described by the equations: 

.. math::
       \sum_{\mathrm{i}=1}^N x_{\mathrm{i}}\left(K_{\mathrm{i}}-K_{\mathrm{SC}}^{e f f}\right) P^{e f f \mathrm{i}}=0 

.. math::
        \sum_{\mathrm{i}=1}^N x_{\mathrm{i}}\left(\mu_{\mathrm{i}}-\mu_{\mathrm{SC}}^{e f f}\right) Q^{e f f \mathrm{i}}=0



.. GENERATED FROM PYTHON SOURCE LINES 33-38

The question is as follows: Calculate the self-consistent effective bulk and shear moduli, :math:`K_{eff}^{SC}`and :math:`G_{eff}^{SC}`, for a water-saturated rock consisting of spherical quartz grains (aspect ratio :math:`\alpha` = 1) and total porosity 0.3. The pore space consists of spherical pores :math:`\alpha` = 1 and thin penny-shaped cracks (:math:`\alpha` = 1e^âˆ’2). The thin cracks have a porosity of 0.01, whereas the remaining porosity (0.29) is made up of the spherical pores.


There are three phases in the composite, i.e. quartz grain, water filled spherical pore, and water filled thin cracks. We can use the method ``EM.Berryman_sc`` to easily solve this exercise to find the effective moduli of the composite.


.. GENERATED FROM PYTHON SOURCE LINES 41-55

.. code-block:: python3


    # three phase K=[K1,K2,K3]
    K=[37,2.25,2.25]
    # G=[G1,G2,G3]
    G=[44,0,0]
    # X=[frac1, frac2, frac3]
    X=[0.7,0.29,0.01]
    # Alpha= [alpha1, alpha2, alpha3]
    Alpha=[1,1,0.01]

    # effective moduli
    K_sc,G_sc= EM.Berryman_sc(K,G,X,Alpha)









.. GENERATED FROM PYTHON SOURCE LINES 56-60

.. code-block:: python3



    print('K_eff and G_eff of the composite are {:.2f} GPa and {:.2f} GPa, respectively'.format(K_sc,G_sc))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    K_eff and G_eff of the composite are 16.80 GPa and 11.56 GPa, respectively





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.005 seconds)


.. _sphx_glr_download_getting_started_09_Berrymann_SC.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 09_Berrymann_SC.py <09_Berrymann_SC.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 09_Berrymann_SC.ipynb <09_Berrymann_SC.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
